import asyncio
import datetime
import random

from aiogram import types
from aiogram.dispatcher import FSMContext

import config
from config import ENEMY_NPC_FIND_TIME
from database import DB
from filters.filter import IsPrivate
from keyboards import default
from loader import dp, bot
from src.enemy import Enemy
from src.trick import Trick
from src.user import User
from state.states import FightState, FightStateUser
from utils import strings, functions
from utils.class_getter import get_location, get_user_info, get_enemy_list, get_fight_room, get_resource, get_quest, \
    get_fight_room_u
from utils.functions import ret_city


@dp.message_handler(IsPrivate(), text=strings.menuMainButtonsList[8])
async def find_fight(message: types.Message, state: FSMContext):
    """‚öî –ù–∞–π—Ç–∏ –≤—Ä–∞–≥–æ–≤ (–∫–Ω–æ–ø–∫–∞)"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ª–æ–∫–∞—Ü–∏–∏
    user_info = await get_user_info(message.from_user.id)
    location = await get_location(user_info.city)
    aviable_haracteristics = await user_info.get_aviable_haracteristics()
    # –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è —ç—Ç–æ –Ω–µ –≥–æ—Ä–æ–¥
    is_city = not await location.get_is_city if user_info.city == "coliseum" else await location.get_is_city
    if not is_city:
        if user_info.current_hp >= aviable_haracteristics[0] / 2:
            if user_info.healing == 1:
                await DB.set_healing(message.from_user.id, 0)
            if user_info.city != "coliseum":
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
                await FightState.cancel_find.set()
                # –°–æ–æ–±—â–µ–Ω–∏–µ üî≠ –ù–∞—á–∞–ª—Å—è –ø–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –≤ reply_markup –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫
                await bot.send_message(message.from_user.id, strings.start_find_enemy,
                                       reply_markup=await default.get_fight_res_button(strings.cancel_del))
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–µ–π—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ —É–∫–∞–∑–∞–Ω—ã–π –≤ –∫–æ–Ω—Ñ–∏–≥–µ
                await fight_state(state, random.randint(ENEMY_NPC_FIND_TIME[0], ENEMY_NPC_FIND_TIME[1]))

        else:
            await bot.send_message(message.from_user.id, strings.string_you_not_have_hp)


async def fight_state(state: FSMContext, sleep_time):
    current_data = datetime.datetime.now().timestamp()
    await state.update_data(timestamp=current_data)
    # –ó–∞—Å—ã–ø–∞–µ–º
    await asyncio.sleep(sleep_time)

    data = await state.get_data()

    if 'timestamp' in list(data) and data["timestamp"] == current_data:
        if await state.get_state():
            if not await DB.get_fight_room_info(state.user):
                user_info = await get_user_info(state.user)
                enemyes = await get_enemy_list(user_info.city)
                # –†–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ —É—Ä–æ–≤–Ω—é –∏ –ª–æ–∫–∞—Ü–∏–∏
                opponent = random.choice(enemyes)
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É —Å—Ä–∞–∂–µ–Ω–∏–µ
                await DB.add_fight_room(state.user, opponent)
                # –û–ø–æ–≤–µ—â–∞–µ–º –æ–± –Ω–∞—á–∞–ª–µ —Å—Ä–∞–∂–µ–Ω–∏—è
                await bot.send_message(state.user, await strings.you_finded_enemy(opponent),
                                       reply_markup=await default.fight_act(True, user_info, True))
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–∂–Ω–∏–π —Å—Ç–µ–π—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π
                await state.finish()
                await FightState.fight_attack.set()
                # –ó–∞–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                await DB.set_last_move_npc(state.user)
                # –ó–∞–ø—É—Å–∫ –Ω–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
                asyncio.create_task(time_move(state))

        else:
            await state.finish()


@dp.message_handler(IsPrivate(), text=[strings.take_life, strings.take_reward, strings.to_hunt_loc])
async def fight_last_step(message: types.Message):
    await ret_city(message.from_user.id)


@dp.message_handler(IsPrivate(), state=FightState.cancel_find)
async def cancel_find_fight(message: types.Message, state: FSMContext):
    if message.text == strings.cancel_del:
        asyncio.create_task(functions.heal_hp(message.from_user.id))
        await state.finish()
        await bot.send_message(message.from_user.id, strings.find_fight_canceled)
        await DB.delete_add_from_wait_room(message.from_user.id, False)
        await ret_city(message.from_user.id)
    else:
        await bot.send_message(message.from_user.id, strings.you_in_find, reply_markup=await default.get_fight_res_button(
            strings.cancel_del))


@dp.message_handler(IsPrivate(), state=[FightState.fight_attack, FightStateUser.fight_attack],
                    text=strings.tricks_titles)
async def tricks_use(message: types.Message, state: FSMContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–µ–≤—ã—Ö –ø—Ä–∏–µ–º–æ–≤"""
    current_trick = Trick(*await DB.get_trick_with_title(message.text))
    need_round_items = await current_trick.get_need_round_items
    user_info = await get_user_info(message.from_user.id)

    if await DB.check_item_on_inventory(current_trick.id, user_info.nickname):

        is_npc_state = await state.get_state() != "FightStateUser:fight_attack"

        fight_info = await get_fight_room(message.from_user.id) if is_npc_state else await get_fight_room_u(message.from_user.id)

        attack_and_block = await fight_info.attack_and_block(message.from_user.id)
        if need_round_items[0] <= attack_and_block[0] and \
                need_round_items[1] <= attack_and_block[1]:

            await DB.set_last_trick(message.from_user.id, current_trick.id) \
                if is_npc_state else await DB.set_last_trick(
                message.from_user.id,
                current_trick.id,
                await fight_info.get_player_position(message.from_user.id))

            if current_trick.repeat != 0:
                await DB.set_used_tricks(message.from_user.id, current_trick.id) \
                    if is_npc_state else await DB.set_used_tricks(
                    message.from_user.id, current_trick.id, await fight_info.get_player_position(message.from_user.id))

            if need_round_items[0] != 0:
                await DB.update_round_item("attacks", need_round_items[0],
                                           message.from_user.id) if is_npc_state else await DB.update_round_item(
                    "attacks", need_round_items[0], message.from_user.id,
                    await fight_info.get_player_position(message.from_user.id))
            if need_round_items[1] != 0:
                if is_npc_state:
                    await DB.update_round_item("dext", need_round_items[1], message.from_user.id)
                else:
                    await DB.update_round_item("blocks", need_round_items[1], message.from_user.id,
                                               await fight_info.get_player_position(message.from_user.id))

        await bot.send_message(message.from_user.id, strings.where_you_will_to_hit,
                               reply_markup=await default.fight_act(True, user_info, True))


@dp.message_handler(IsPrivate(), state=[FightState.fight_attack, FightState.fight_defence],
                    text=strings.fight_actions_buttons[-1])
async def fight_run(message: types.Message):
    await bot.send_message(message.from_user.id, strings.are_you_sure_run,
                           reply_markup=await default.yes_or_no_buttons())


@dp.message_handler(IsPrivate(), state=[FightState.fight_attack, FightState.fight_defence], text=strings.yes_or_no[0])
async def fight_cancel(message: types.Message, state: FSMContext):
    """–°–±–µ–∂–∞—Ç—å -> –î–∞"""
    # –° —à–∞–Ω—Å–æ–º 1 –∏–∑ 3 –º—ã –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–±–µ–∂–∞—Ç—å
    if random.randint(1, 3) == 3:
        # –ï—Å–ª–∏ –ø–æ–≤–µ–∑–ª–æ
        await state.finish()
        # –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ —É—Å–ø–µ—à–Ω–æ
        await bot.send_message(message.from_user.id, strings.you_successfully_runed,
                               reply_markup=await default.get_fight_res_button(strings.to_hunt_loc))
        # –£–¥–∞–ª–∏–º –∫–æ–º–Ω–∞—Ç—É
        await DB.delete_fight_room(message.from_user.id)
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–≤–µ–∑–ª–æ
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–µ–π—Ç
        await state.finish()
        # –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –Ω–µ —É—Å–ø–µ—à–Ω–æ
        await bot.send_message(message.from_user.id, strings.you_losed_run,
                               reply_markup=await default.get_fight_res_button(strings.take_life))
        # –°–µ—Ç–∏–º —Ö–ø –∫ –Ω—É–ª—é
        values = await DB.get_hp(message.from_user.id)
        await DB.set_current_hp(message.from_user.id, values[0], "-")
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥
        await DB.set_city(message.from_user.id, "baki")
        # –£–¥–∞–ª–∏–º –∫–æ–º–Ω–∞—Ç—É
        await DB.delete_fight_room(message.from_user.id)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Ö–∏–ª
    asyncio.create_task(functions.heal_hp(message.from_user.id))


@dp.message_handler(IsPrivate(), state=FightState.fight_attack)
async def fight_attack(message: types.Message, state: FSMContext):
    user_info = await get_user_info(state.user)
    if message.text in strings.fight_actions_buttons[0:5]:
        await DB.set_attack_action(message.from_user.id, strings.fight_actions[message.text], "attack")
        await bot.send_message(message.from_user.id, strings.what_you_want_to_defaet,
                               reply_markup=await default.fight_act(False, user_info))
        await state.finish()
        await FightState.fight_defence.set()
    else:
        await bot.send_message(message.from_user.id, strings.where_you_will_to_hit,
                               reply_markup=await default.fight_act(True, user_info, True))


@dp.message_handler(IsPrivate(), state=FightState.fight_defence)
async def fight_defence(message: types.Message, state: FSMContext):
    user_info = await get_user_info(state.user)
    if message.text in strings.fight_actions_buttons[5:10]:
        fight_room = await get_fight_room(message.from_user.id)
        if not fight_room.can_do_move:
            await DB.set_do_move(message.from_user.id)
            await DB.set_attack_action(message.from_user.id, strings.fight_actions[message.text], "block")
            # –∑–∞–Ω–æ—Å–∏–º –≤ –±–¥ —á—Ç–æ –≤—ã–±—Ä–∞–ª

            await bot.send_message(message.from_user.id, strings.wait_res_move,
                                   reply_markup=await default.get_fight_res_button(strings.fight_actions_buttons[-1]))
            await asyncio.sleep(random.randint(*config.WAIT_RES_MOVE))
            fight_info = await get_fight_room(state.user)
            # –¥–µ–ª–∞–µ–º —Ö–æ–¥
            await bot.send_message(message.from_user.id, await fight_info.get_text_fight(),
                                   reply_markup=await default.fight_act(True, user_info))
            await DB.set_do_move(message.from_user.id)
            await resultat_move(state)

    elif message.text == strings.fight_actions_buttons[10]:
        await DB.set_attack_action(message.from_user.id, strings.fight_actions[message.text], "block")
        await resultat_move(state)

    else:
        # —ç—Ç–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
        await bot.send_message(message.from_user.id, strings.what_you_want_to_defaet,
                               reply_markup=await default.fight_act(False, user_info))


async def resultat_move(state: FSMContext):
    await state.finish()
    fight_info = await get_fight_room(state.user)
    user_info = await get_user_info(state.user)
    enemy_current_hp = await fight_info.get_enemy_current_hp

    hp = [user_info.current_hp > 0, enemy_current_hp > 0]

    if hp[0] is False or hp[1] is False:
        res = await strings.get_fight_result(hp, await fight_info.get_enemy)

        await DB.delete_fight_room(state.user)
        asyncio.create_task(functions.heal_hp(state.user))

        if res[2]:
            await DB.set_city(state.user, "baki")
            await DB.update_glory(3, '-', user_info.id)
            await bot.send_message(user_info.id, res[0], reply_markup=await default.get_fight_res_button(res[1]))

        else:
            enemy = await fight_info.get_enemy
            resultat = await get_fight_res_loot(user_info, enemy)
            resource = await get_resource(resultat[2])

            bonus_xp_text = f"(+{user_info.bonus_xp}%)" if user_info.bonus_xp != 0 else ""
            bonus_gold_text = f"(+{user_info.bonus_gold}%)" if user_info.bonus_gold != 0 else ""

            # –ü–æ–ª—É—á–∏–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ –±–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–±–µ–ª–∏–ª
            text = res[0] + "\n" + strings.get_received_reward.format(resultat[0], bonus_xp_text, resultat[1], bonus_gold_text, resource.title)
            await bot.send_message(user_info.id, text, reply_markup=await default.get_fight_res_button(res[1]))
            await DB.add_item_to_inventory(user_info.nickname, resource.type, resource.item_id)

            # –ó–∞–¥–µ–π—Å—Ç–≤—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏ –∑–æ–ª–æ—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            await add_enemy_quest(user_info.id, enemy.id)
            await DB.update_glory(3, '+', user_info.id)
            await functions.increase_player_level(user_info, resultat[0])
            await DB.update_balance(resultat[1], "+", user_info.id)

    else:
        await FightState.fight_attack.set()
        await DB.set_last_move_npc(state.user)


async def add_enemy_quest(user_id, enemy_name):
    for quest_id in await DB.get_quest_user(user_id):
        current_quest = await get_quest(quest_id[0])
        enemy_type = current_quest.quest_type_req.split("_")[1]
        if enemy_name == enemy_type or enemy_type == "all":
            await DB.add_received_quest(user_id, current_quest.id)





async def get_fight_res_loot(user_info: User, enemy: Enemy):
    lvl_boost = enemy.get_xp
    gold_add = enemy.get_gold

    lvl_boost = lvl_boost + lvl_boost / 100 * user_info.bonus_xp if user_info.bonus_xp != 0 else lvl_boost
    gold_add = gold_add + gold_add / 100 * user_info.bonus_gold if user_info.bonus_gold != 0 else gold_add

    return [round(lvl_boost), round(gold_add), random.choice(enemy.get_loot)]


async def time_move(state: FSMContext):
    await_time = config.WAIT_MOVE_TIME // 2

    # –¶–∏–∫–ª –ø–æ–∫–∞ —Ä—É–º–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    while await DB.get_bool_npcRoom(state.user):
        notify = False
        while True:
            # –ó–∞—Å—ã–ø–∞–µ–º –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –≤—Ä–µ–º–µ–Ω–∏
            await asyncio.sleep(await_time)
            try:
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è - –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞ >= –ø–æ–ª–æ–≤–∏–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
                npc_last_move = await DB.get_last_move_time_npc(state.user)
                if notify is False and datetime.datetime.now().timestamp() - npc_last_move >= await_time:
                    # –ü–∏—à–µ–º —á—Ç–æ –ø—Ä–æ—à–ª–∞ –ø–æ–ª–æ–≤–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏
                    await bot.send_message(state.user, strings.string_time_sec.format(config.WAIT_MOVE_TIME // 2))
                    notify = True

                elif datetime.datetime.now().timestamp() - npc_last_move >= await_time * 2:
                    _state = await state.get_state()

                    fight_info = await get_fight_room(state.user)

                    # –ü–∏—à–µ–º —á–µ–ª—É —á—Ç–æ –æ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Ö–æ–¥, –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ—É –æ —Ä–∞—É–Ω–¥–µ
                    user_info = await get_user_info(state.user)
                    await bot.send_message(state.user, await fight_info.get_text_fight(True),
                                           reply_markup=await default.fight_act(True, user_info))

                    # –≠—Ç–æ –Ω–∞–¥–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π—Ç–∞
                    await resultat_move(state)
                    break
            except TypeError:
                return





